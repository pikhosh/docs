import{_ as e,d as s}from"./app.c5ce3f59.js";const a={},n=s(`<h1 id="schema" tabindex="-1"><a class="header-anchor" href="#schema" aria-hidden="true">#</a> Schema</h1><p>When using Isar, you&#39;re dealing with Collections. A collection can only contain a single type of Dart object. To let Isar know which objects you want to store, you need to annotate your classes with <code>@Collection()</code>. The Isar code generator will take care of the rest. All the collections combined are called the &quot;database schema&quot;.</p><h2 id="annotating-classes" tabindex="-1"><a class="header-anchor" href="#annotating-classes" aria-hidden="true">#</a> Annotating classes</h2><p>The Isar generator will find all classes annotated with <code>@Collection()</code>.</p><div class="language-dart ext-dart"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">@Collection</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Contact</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">@Id</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">int</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> id;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> firstName;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> lastName;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;"> isStarred;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div><table><thead><tr><th>Config</th><th>Description</th></tr></thead><tbody><tr><td><code>inheritance</code></td><td>Control whether fields of parent classes and mixins will be stored in Isar. Enabled by default.</td></tr><tr><td><code>accessor</code></td><td>Allows you to rename the default collection accessor (for example <code>isar.contacts</code> for the <code>Contact</code> collection).</td></tr></tbody></table><h3 id="id" tabindex="-1"><a class="header-anchor" href="#id" aria-hidden="true">#</a> Id</h3><p>All model classes need to define an id by annotating a property with <code>@Id()</code> that uniquely identifies an object. Only <code>int</code> properties may be used as id. If a class has a field called <code>id</code>, you can omit the <code>@Id()</code> annotation.</p><div class="language-dart ext-dart"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">@Collection</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Pet</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">@Id</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">int</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> id; </span><span style="color:#7F848E;font-style:italic;">// field is called id so an @Id() annotation is not required</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> name;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div><p>Isar automatically indexes id fields, which allows you to efficiently read and modify objects based on their id.</p><p>You can either set ids yourself or request Isar to assign an auto-increment id. If the <code>id</code> field is <code>null</code>, Isar will use an auto-increment id. You can also assign <code>Isar.autoIncrement</code> to the id field to request an auto-increment id.</p><h3 id="supported-types" tabindex="-1"><a class="header-anchor" href="#supported-types" aria-hidden="true">#</a> Supported types</h3><p>Isar supports the following data types:</p><ul><li><code>bool</code></li><li><code>int</code></li><li><code>double</code></li><li><code>DateTime</code></li><li><code>String</code></li><li><code>Uint8List</code></li><li><code>List&lt;bool&gt;</code></li><li><code>List&lt;int&gt;</code></li><li><code>List&lt;double&gt;</code></li><li><code>List&lt;DateTime&gt;</code></li><li><code>List&lt;String&gt;</code></li></ul><p>It is important to understand how nullability works in Isar: Number types do <strong>NOT</strong> have a dedicated <code>null</code>-representation. Instead a specific value will be used:</p><table><thead><tr><th></th><th>VM</th><th>Web</th></tr></thead><tbody><tr><td><strong>int</strong></td><td><code>int.MIN</code></td><td><code>-Infinity</code></td></tr><tr><td><strong>double</strong></td><td><code>double.NaN</code></td><td><code>-Infinity</code></td></tr></tbody></table><p><code>bool</code>, <code>String</code> and <code>List</code> have a separate <code>null</code> representation.</p><p>This behavior allows for nice performance improvements and it allows you to change the nullability of your fields freely without requiring migration or special code to handle <code>null</code>s.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Web does not support <code>NaN</code>. This is an IndexedDB limitation.</p></div><p>\u27A1\uFE0F Use <code>TypeConverter</code>s to store unsupported types like enums: <a href="type_converters">Type Converters</a></p><h3 id="_8-byte-and-4-byte-numbers" tabindex="-1"><a class="header-anchor" href="#_8-byte-and-4-byte-numbers" aria-hidden="true">#</a> 8-byte and 4-byte numbers</h3><p><code>int</code> and <code>double</code> have an 8-byte representation in Dart. By default, this is also true for Isar. You can however change numbers to a 4-byte representation to save disk space by annotating number fields with <code>@Size32()</code>. It is your responsibility to make sure that you do not store a number that requires eight byte in a <code>@Size32()</code> field.</p><p>Since JavaScript only supports 64-bit floating point numbers <code>@Size32()</code> has no effect on web.</p><h3 id="datetime" tabindex="-1"><a class="header-anchor" href="#datetime" aria-hidden="true">#</a> DateTime</h3><p>Isar does not store timezone information of your dates. Instead it converts <code>DateTime</code>s to UTC before storing them. Isar returns all dates in local time.</p><p><code>DateTime</code>s are stored with microsecond precision. In browsers, only millisecond precision is supported because of JavaScript limitations.</p><h3 id="ignoring-fields" tabindex="-1"><a class="header-anchor" href="#ignoring-fields" aria-hidden="true">#</a> Ignoring fields</h3><p>By default, all public fields of a class will be persisted. By annotating a field with <code>@Ignore()</code>, you can exclude it from persistence. Keep in mind that it is not good practice to store information in your Isar objects that is not persisted.</p><h3 id="renaming-classes-and-fields" tabindex="-1"><a class="header-anchor" href="#renaming-classes-and-fields" aria-hidden="true">#</a> Renaming classes and fields</h3><p>You have to be careful when you want to rename a class or field. Most of the time the old class or field will just be dropped and recreated. With the <code>@Name()</code> annotation, you can name classes and fields in the database independantly from Dart. The following code will yield the exact same schema as the code above.</p><div class="language-dart ext-dart"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">@Collection</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">@Name</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Contact&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MyContactClass1</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">@Id</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">@Name</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;id&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">int</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> myObjectId;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">@Name</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;firstName&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> theFirstName;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">@Name</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;lastName&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> familyNameOrWhatever;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;"> isStarred;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="schema-migration" tabindex="-1"><a class="header-anchor" href="#schema-migration" aria-hidden="true">#</a> Schema migration</h2><p>It is possible to change the schema between releases of your app (for example by adding collections) but it is very important to follow the rules of schema migration.</p><p>You are allowed to do the following modifications:</p><ul><li>Add &amp; remove collections</li><li>Add &amp; remove fields</li><li>Change the nullability of a field (e.g. <code>int</code> -&gt; <code>int?</code> or <code>List&lt;String?&gt;?</code> -&gt; <code>List&lt;String&gt;</code>)</li><li>Add &amp; remove indexes</li><li>Add &amp; remove links</li><li>Change between <code>Link&lt;MyCol&gt;</code> and <code>Links&lt;MyCol&gt;</code> (no data will be lost)</li></ul><div class="custom-container warning"><p class="custom-container-title">WARNING</p><h4 id="be-careful" tabindex="-1"><a class="header-anchor" href="#be-careful" aria-hidden="true">#</a> BE CAREFUL</h4><p>If you rename a field or collection that is not annotated with <code>@Name()</code>, the field or collection will be dropped and recreated.</p></div><p>Deleted fields will still remain in the database. You are not allowed to recreate deleted fields with a different type.</p><div class="custom-container danger"><p class="custom-container-title">DANGER</p><h4 id="illegal-modifications" tabindex="-1"><a class="header-anchor" href="#illegal-modifications" aria-hidden="true">#</a> ILLEGAL MODIFICATIONS</h4><ul><li>Changing the type of fields in existing collections (even previously deleted ones)</li><li>Creating a unique index for a property with duplicate values</li></ul></div>`,38);function o(t,l){return n}var c=e(a,[["render",o],["__file","schema.html.vue"]]);export{c as default};
