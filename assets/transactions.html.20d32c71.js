import{_ as t,r as o,o as e,c as r,a as s,b as l,F as c,e as a,d as p}from"./app.c5ce3f59.js";const i={},d=s("h1",{id:"transactions",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#transactions","aria-hidden":"true"},"#"),a(" Transactions")],-1),B=a("In Isar, transactions combine multiple database operations in a single unit of work. Most interactions with Isar implicitly use transactions. Read & write access in Isar is "),y={href:"http://en.wikipedia.org/wiki/ACID",target:"_blank",rel:"noopener noreferrer"},h=a("ACID"),u=a(" compliant. Transactions are automatically rolled back if an error occurs."),F=p(`<h2 id="explicit-transactions" tabindex="-1"><a class="header-anchor" href="#explicit-transactions" aria-hidden="true">#</a> Explicit transactions</h2><p>With an explicit transaction you get a consistent snapshot of the database. You should try to minimize the time a transaction is active. It is forbidden to do network calls or other long running operations in a transaction.</p><p>Transactions (especially write transactions) do have a cost and you should always try to group successive operations in a single transaction.</p><p>Transactions can either be synchronous or asynchronous. In synchronous transactions you may only use synchronous operations. In asynchronous transactions only async operations.</p><table><thead><tr><th></th><th>Read</th><th>Read &amp; Write</th></tr></thead><tbody><tr><td>Synchronous</td><td><code>.txnSync()</code></td><td><code>.writeTxnSync()</code></td></tr><tr><td>Asynchronous</td><td><code>.txn()</code></td><td><code>.writeTxn()</code></td></tr></tbody></table><h3 id="read-transactions" tabindex="-1"><a class="header-anchor" href="#read-transactions" aria-hidden="true">#</a> Read transactions</h3><p>Explicit read transactions are optional but they allow you to do atomic reads and rely on a consistent state of the database. Internally Isar always uses implicit read transactions for all read operations.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Async read transactions run in parallel to other read and write transactions. Pretty cool, right?</p></div><h3 id="write-transactions" tabindex="-1"><a class="header-anchor" href="#write-transactions" aria-hidden="true">#</a> Write transactions</h3><p>Unlike read operations, write operations in Isar always have to be wrapped in an explicit transaction.</p><p>When a write transaction finishes succesfully, it is automatically commited and all changes are written to disk. If an error occurs, the transaction is aborted and all the changes are discarded. Transactions are \u201Call or nothing\u201D: either all the writes within a transaction succeed, or none of them take effect. This helps guarantee data consistency.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>When a database operation fails, the transaction is aborted and must no longer be used. Even if you catch the error in Dart.</p></div><div class="language-dart ext-dart"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">@Collection</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Contact</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">@Id</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">int</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> id;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">late</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> name;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// GOOD</span></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> isar.</span><span style="color:#61AFEF;">writeTxn</span><span style="color:#ABB2BF;">((isar) </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> contact </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getContacts</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    isar.contacts.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(contact);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// BAD: move loop inside transaction</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> contact </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getContacts</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> isar.</span><span style="color:#61AFEF;">writeTxn</span><span style="color:#ABB2BF;">((isar) </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    isar.contacts.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(contact);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div>`,13);function A(D,m){const n=o("ExternalLinkIcon");return e(),r(c,null,[d,s("p",null,[B,s("a",y,[h,l(n)]),u]),F],64)}var w=t(i,[["render",A],["__file","transactions.html.vue"]]);export{w as default};
