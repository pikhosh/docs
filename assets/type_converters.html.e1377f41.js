import{_ as s,d as n}from"./app.c5ce3f59.js";const a={},e=n(`<h1 id="type-converters" tabindex="-1"><a class="header-anchor" href="#type-converters" aria-hidden="true">#</a> Type Converters</h1><p>Isar only supports storing basic <code>database types</code> like numbers and lists but you can use type converters to use other <code>Dart types</code> like Enums with Isar.</p><h2 id="creating-a-typeconverter" tabindex="-1"><a class="header-anchor" href="#creating-a-typeconverter" aria-hidden="true">#</a> Creating a <code>TypeConverter</code></h2><p>Let&#39;s assume we want to store the following enum in Isar:</p><div class="language-dart ext-dart"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">enum</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Relationship</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  single,</span></span>
<span class="line"><span style="color:#ABB2BF;">  married,</span></span>
<span class="line"><span style="color:#ABB2BF;">  itIsComplicated,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div><p>Writing a converter is easy, just map the enum to a supported type. For enums it is recommended to use the enum index for mapping.</p><div class="language-dart ext-dart"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">RelationshipConverter</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">extends</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TypeConverter</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Relationship</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">int</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">RelationshipConverter</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Converters need to have an empty const constructor</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">@override</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">Relationship</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fromIsar</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">int</span><span style="color:#ABB2BF;"> relationshipIndex) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Relationship</span><span style="color:#ABB2BF;">.values[relationshipIndex];</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">@override</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">toIsar</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Relationship</span><span style="color:#ABB2BF;"> relationship) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> relationship.index;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div><p>As you can see, just two methods are required. <code>fromIsar()</code> converts the database value to the Dart representation and <code>toIsar()</code> does the opposite.</p><h2 id="using-a-typeconverter" tabindex="-1"><a class="header-anchor" href="#using-a-typeconverter" aria-hidden="true">#</a> Using a <code>TypeConverter</code></h2><p>Once you created a type adapter, the hardest part is done. Using <code>TypeAdapters</code> is super easy. Just annotate the fields you want to convert and you&#39;re done.</p><div class="language-dart ext-dart"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">@Collection</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">int</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> id;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">late</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">@RelationshipConverter</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">late</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Relationship</span><span style="color:#ABB2BF;"> relationship;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div><p>Now let&#39;s try to query all the people in our database that are married:</p><div class="language-dart ext-dart"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">final</span><span style="color:#ABB2BF;"> marriedPersons </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> isar.persons</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">where</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">relationshipEqualTo</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Relationship</span><span style="color:#ABB2BF;">.married)</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">findAll</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre></div><p>There is only one very important thing to keep in mind: You may change the converter for an existing field but the <code>database type</code> <strong>MUST BE THE SAME</strong>. Otherwise the schema migration will fail.</p>`,14);function p(l,o){return e}var r=s(a,[["render",p],["__file","type_converters.html.vue"]]);export{r as default};
